# sWAF/NGINX
# 'http' context directives
# Configuration specific to HTTP virtual servers and upstreams


## --> EXAMPLE: Define simple upstream group.
#upstream pool_server {
#    server server1:80;
#    server server2:80;
#}


## --> EXAMPLE: Redirect from HTTP to HTTPS.
#server {
#    ### Listening on IPv4
#    listen 80;
#    ### Listening on IPv6
#    listen [::]:80;
#    server_name example.com example.org;
#
#    return 301 https://$host$request_uri;
#}

#server {
#    ### Listening on IPv4
#    listen 443 ssl http2;
#    ### Listening on IPv6
#    listen [::]:443 ssl http2;
#    server_name example.com example.org;
#
#    ### Always use fullchained certificate that includes intermediate ones
#    ssl_certificate /var/lib/certs/example.com/fullchain.cer;
#    ssl_certificate_key /var/lib/certs/example.com/example.com.key;
#
#    ### Prefix properly the access.log file
#    access_log /var/log/nginx/example.access.log main;
#
#    ### Enable HSTS if your web service should only be served using HTTPS
#    ### Set max-age to 86400s at first in case of mistake in the HTTPS deployment
#    add_header Strict-Transport-Security "max-age=86400; includeSubDomains" always;
#    ### Set HSTS max-age to 1 year if you are sure of your deployment
#    #add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#
#    ### Proxify requests to the backend pool server
#    location / {
#        proxy_pass http://pool_server;
#    }
#
#    location /one {
#        # Specific configuration for processing URIs starting with '/one'
#    }
#
#    location /two {
#        # Specific configuration for processing URIs starting with '/two'
#    }
#
#    ### sWAF defined error pages without any signature
#    error_page 400 /400.html;
#    location = /400.html {
#        root /var/lib/nginx/html;
#    }
#    error_page 403 /403.html;
#    location = /403.html {
#        root /var/lib/nginx/html;
#    }
#    error_page 404 /404.html;
#    location = /404.html {
#        root /var/lib/nginx/html;
#    }
#    error_page 500 502 503 504 /50x.html;
#    location = /50x.html {
#        root /var/lib/nginx/html;
#    }
#
#    ### Or error can be more strictly handled by returning 444, a non-standard code that closes the connection
#    error_page 400 403 404 500 502 503 504 =444 /444.html;
#    location = /444.html {
#        return 444;
#    }
#}
